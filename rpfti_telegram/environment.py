import requests
import rpfti.shared_config
import json
import math
import datetime
import re
from .core_addon import BotCommand, BotAddon

aqi_link = "http://api.airvisual.com/v2/nearest_city?lat={}&lon={}&key={}"

errors = {
    "call_limit_reached": "–∏—Å—Ç—ë–∫ –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã",
    "city_not_found": "—Ä—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
    "ip_location_failed": "—Ä—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
    "no_nearest_station": "—Ä—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å—Ç–∞–Ω—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
    "too_many_requests": "–∏—Å—Ç—ë–∫ –ª–∏–º–∏—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã"
}

# clear sky (day)	01d.png	
# clear sky (night)	01n.png	
# few clouds (day)	02d.png	
# few clouds (night)	02n.png	
# scattered clouds	03d.png	
# broken clouds	04d.png	
# shower rain	09d.png	
# rain (day time)	10d.png	
# rain (night time)	10n.png	
# thunderstorm	11d.png	
# snow	13d.png	
# mist	50d.png

weather_types = {
    "01": "‚òÄÔ∏è",
    "02": "üå§",
    "03": "üå•",
    "04": "‚òÅÔ∏è",
    "09": "üåß",
    "10": "üå¶",
    "11": "üå©",
    "13": "üå®",
    "50": "üå´"
}

coords_re = re.compile("^\s*(\d+[\.,]?\d*)\D+(\d+[\.,]?\d*)\s*$")

# {
#     "status": "success",
#     "data":
#     {
#         "city": "Inashiki",
#         "state": "Ibaraki",
#         "country": "Japan",
#         "location":
#         {
#             "type": "Point",
#             "coordinates":
#             [
#                 140.32356,
#                 35.95633
#             ]
#         },
#         "current":
#         {
#             "pollution":
#             {
#                 "ts": "2023-03-05T16:00:00.000Z",
#                 "aqius": 21,
#                 "mainus": "p2",
#                 "aqicn": 7,
#                 "maincn": "p2"
#             },
#             "weather":
#             {
#                 "ts": "2023-03-05T16:00:00.000Z",
#                 "tp": 7,
#                 "pr": 1021,
#                 "hu": 72,
#                 "ws": 0.89,
#                 "wd": 90,
#                 "ic": "10n"
#             }
#         }
#     }
# }


def _parse_air(air_response):
    result_string = "–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–æ–∑–¥—É—Ö–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç:\n\n"
    data = air_response.get("data")
    result_string += "{}, {}\n".format(data.get("country",
                                                "–°—Ç—Ä–∞–Ω–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"),
                                       data.get("city", "–ì–æ—Ä–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"))
    current_data = data.get("current")
    aqius = current_data.get("pollution").get("aqius")
    if aqius <= 50:
        quality = "üíô, –≤–æ–∑–¥—É—Ö –æ—á–µ–Ω—å —á–∏—Å—Ç—ã–π. –ì—É–ª—è–π –∏ –∑–∞–Ω–∏–º–∞–π—Å—è —Å–ø–æ—Ä—Ç–æ–º –Ω–∞ —É–ª–∏—Ü–µ."
    elif aqius <= 100:
        quality = "üíö, –≤–æ–∑–¥—É—Ö –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á–∏—Å—Ç—ã–π, –Ω–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã" + \
            " —É —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π. –ï—Å–ª–∏ —Ç—ã –Ω–µ —Ç–∞–∫–æ–π, —Ç–æ –Ω–∏ –≤ —á—ë–º —Å–µ–±—è" + \
            " –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π."
    elif aqius <= 150:
        quality = "üíõ, –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ —Å—Ä–µ–¥–Ω–µ–µ, –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã" + \
            " —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —É —á–∞—Å—Ç–∏ –ª—é–¥–µ–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–±–µ–≥–∞—Ç—å" + \
            " —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ."
    elif aqius <= 200:
        quality = "üò∑, –≤–æ–∑–¥—É—Ö –≥—Ä—è–∑–Ω—ã–π –∏ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ" + \
            " –∑–¥–æ—Ä–æ–≤—å–µ–º, —É —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π ‚Äî —Å–µ—Ä—å—ë–∑–Ω—ã–µ." + \
            " –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–≥—Ä–∞–Ω–∏—á—å –ø—Ä–µ–±—ã–≤–∞–Ω–∏–µ –Ω–∞ —É–ª–∏—Ü–µ –∏–ª–∏ –Ω–∞–¥–µ–≤–∞–π –º–∞—Å–∫—É."
    elif aqius <= 300:
        quality = "üòµ, –≤–æ–∑–¥—É—Ö –æ—á–µ–Ω—å –≥—Ä—è–∑–Ω—ã–π –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–µ–Ω –¥–ª—è" + \
            " –∑–¥–æ—Ä–æ–≤—å—è –¥–∞–∂–µ –∑–¥–æ—Ä–æ–≤—ã—Ö –ª—é–¥–µ–π. –°–∏–¥–∏ –¥–æ–º–∞ –∏–ª–∏ –Ω–∞–¥–µ–≤–∞–π —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä."
    else:
        quality = "‚ò†Ô∏è, –≤–æ–∑–¥—É—Ö —á—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ –≥—Ä—è–∑–Ω—ã–π, –≤–µ—Å—å–º–∞ –æ–ø–∞—Å–µ–Ω –¥–ª—è" + \
            " –∑–¥–æ—Ä–æ–≤—å—è, –¥–∞–∂–µ –Ω–µ –¥—É–º–∞–π –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —É–ª–∏—Ü—É –±–µ–∑" + \
            " –æ—á–µ–Ω—å —Å–µ—Ä—å—ë–∑–Ω–æ–π –∑–∞—â–∏—Ç—ã, –∞ –¥–æ–º–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–π –¥–∞–∂–µ —Ñ–æ—Ä—Ç–æ—á–∫–∏."
    result_string += "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞: {} {}\n".format(aqius, quality)
    weather_type_raw = current_data.get("weather").get("ic")[:2]
    weather_type = weather_types.get(weather_type_raw)
    result_string += "\n–ü–æ–≥–æ–¥–∞:\n"
    if weather_type:
        result_string += "{} ".format(weather_type)
    result_string += "{}¬∞C, –≤–ª–∞–∂–Ω–æ—Å—Ç—å {}%, –¥–∞–≤–ª–µ–Ω–∏–µ {:.1f} –º–º —Ä—Ç. —Å—Ç.\n".format(
                        current_data.get("weather").get("tp"),
                        current_data.get("weather").get("hu"),
                        current_data.get("weather").get("pr") * 0.7500637554
    )
    wind_dir = current_data.get("weather").get("wd")
    if wind_dir >= 337.5 or wind_dir <= 22.5:
        direction = "—Å–µ–≤–µ—Ä–Ω—ã–π"
    elif wind_dir > 22.5 and wind_dir <= 67.5:
        direction = "—Å–µ–≤–µ—Ä–Ω—ã–π-–≤–æ—Å—Ç–æ—á–Ω—ã–π"
    elif wind_dir > 67.5 and wind_dir <= 112.5:
        direction = "–≤–æ—Å—Ç–æ—á–Ω—ã–π"
    elif wind_dir > 112.5 and wind_dir <= 157.5:
        direction = "—é–≥–æ-–≤–æ—Å—Ç–æ—á–Ω—ã–π"
    elif wind_dir > 157.5 and wind_dir <= 202.5:
        direction = "—é–∂–Ω—ã–π"
    elif wind_dir > 202.5 and wind_dir <= 247.5:
        direction = "—é–≥–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
    elif wind_dir > 247.5 and wind_dir <= 292.5:
        direction = "–∑–∞–ø–∞–¥–Ω—ã–π"
    else:
        direction = "—Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥–Ω—ã–π"
    result_string += "–í–µ—Ç–µ—Ä {}, {} –º/—Å".format(direction,
                                               current_data.get("weather").get("ws"))
    return result_string


def air(cmd, user, chat, message, cmd_args):
    bot = cmd.addon.bot
    txt = "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑–¥—É—Ö–µ –≤–æ–∫—Ä—É–≥ —Ç–µ–±—è, –ø—Ä–∏—à–ª–∏ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"
    all_sent = bot.send_message(chat, txt, origin_user=user,
                                reply_to=message.message_id)
    context = {
        "command": "air",
        "action": "request_reply"
    }
    for a in all_sent:
        bot.keep_context(cmd.addon, context, a.message_id)


def air_reply_handler(addon, db_context, context, user, chat, message):
    bot = addon.bot
    result_txt = "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É"
    coords = None
    if context.get("command") == "air":
        if message.location:
            coords = (float(message.location.latitude),
                      float(message.location.longitude))
        elif message.text:
            coords_match = coords_re.search(message.text)
            if coords_match:
                coords = (float(coords_match.group(1).replace(",", ".")),
                          float(coords_match.group(2).replace(",", ".")))
            else:
                result_txt = "–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
        elif message.photo:
            result_txt = "üò≥"
        else:
            result_txt = "–ü—Ä–∏—à–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π"
    if coords:
        r = requests.get(aqi_link.format(coords[0], coords[1],
                                         rpfti.shared_config.AQI))
        status = r.json().get("status")
        if status != "success":
            result_txt = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º " + \
                "{}, {} ‚Äî —Å–µ—Ä–≤–∏—Å —Å–æ–æ–±—â–∏–ª, —á—Ç–æ {}".format(
                    coords[0], coords[1],
                    errors.get(r.json().get("data").get("message"),
                               "—á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å"))
        else:
            result_txt = _parse_air(r.json())
    bot.send_message(chat, result_txt, origin_user=user,
                     reply_to=message.message_id)


def cmd_air():
    return BotCommand("air", air, help_text="—É–∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞")


def make_air_addon():
    return BotAddon("Environment", "–∑–∞–ø—Ä–æ—Å—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º",
                    [cmd_air()], reply_handler=air_reply_handler)